@page "/quickstart"

<div class="container" id="quickstart">
    <div class="row pl-3">
        <div class="col-sm-10">
            <h1>Quickstart</h1>
            <ol>
                <li>
                    Clone the Lean Paramater Optimization Project:
                    <pre>git clone https://github.com/jameschch/LeanParameterOptimization</pre>
                </li>
                <li>
                    Clone Lean to the same workspace:
                    <pre>git clone https://github.com/quantconnect/lean</pre>
                    For example if your workspace is <code><code>c:\workspace\</code></code> you will now have two folders:
                    <pre>c:\workspace\Lean</pre>
                    <pre>c:\workspace\LeanParameterOptimization</pre>
                </li>
                <li>Open the Lean solution and Build with configuration <code>Debug, Any CPU</code></li>
                <li>Open the LeanParameterOptimization solution and Build</li>
                <li>Edit the config file <code>optimization.json</code> using the config editor tool here: <a href="https://optimizers.ml/Config">https://optimizers.ml/Config</a> or a text editor</li>
                <li>Enter the location of your trading algorithm .dll or .py in <code>algorithmLocation</code></li>
                <li>Now enter the class name of your algorithm in <code>algorithmTypeName</code></li>
                <li>Enter the location of your trade and quote bar data in the <code>dataFolder</code> setting</li>
                <li>Configure <code>maxThreads</code> to define the number of parallel backtests (currently ignored for Python)</li>
                <li>Set the option <code>useSharedAppDomain</code> to true or false. For Python algorithms, this is forced to true</li>
            </ol>
            <p>You will now be configured to maximize Sharpe Ratio using the specified parameters. To start the optimization, run the project: <cpde>Jtc.Optimization.Launcher.Legacy</cpde>.</p>
            <p>The file <code>optimizer.txt</code> contains results which can be visualized as a chart here: <a href="https://optimizers.ml/Chart">https://optimizers.ml/Chart</a></p>

            <h2>Configuring Parameters</h2>
            <p>The <code>optimization.config</code> file comes with several sample parameters which are consumed in the example algorithms:</p>
            <a href="https://github.com/jameschch/LeanParameterOptimization/blob/master/Jtc.Optimization.LeanOptimizer.Example/ParameterizedAlgorithm.cs">ParameterizedAlgorithm.cs</a>
            <br />
            <a href="https://github.com/jameschch/LeanParameterOptimization/blob/master/Jtc.Optimization.LeanOptimizer.Example/ParameterizedSharedAppDomainAlgorithm.cs">ParameterizedSharedAppDomainAlgorithm.cs</a>
            <br />
            <a href="https://github.com/jameschch/LeanParameterOptimization/blob/master/Jtc.Optimization.LeanOptimizer.Example/ParameterizedSharedAppDomainAlgorithm.py">ParameterizedSharedAppDomainAlgorithm.py</a>
            <p>As you can see, the project <code>QuantConnect.Configuration</code> provides a means to read the parameters supplied by the optimizers.</p>
            <p>When <code>useSharedAppDomain</code> is set to true, it is essential that you use the <a href="https://github.com/jameschch/LeanParameterOptimization/blob/master/Jtc.Optimization.LeanOptimizer.Example/InstancedConfig.cs">InstancedConfig</a> to read parameters in your algorithm.</p>

            <p>The parameter value ranges are specified in the <code>genes</code> section of <code>optimization.config</code>. You can specify 5 fields to describe the value of a parameter:</p>
            <ul>
                <li><code>key</code> - The unique key to identify the value</li>
                <li><code>min</code> - The minimum</li>
                <li><code>max</code> - The maximum</li>
                <li><code>precision</code> - The number of decimal places</li>
                <li><code>actual</code> - The actual starting value</li>
            </ul>

            <h2>Next Steps</h2>
            <p>
                Once the optimizer is working, you can try some different optimization methods.
                A good general purpose approach is 2-fold Sharpe ratio maximization using Particle Swarm.
                This will produce results that are not overfit to a single period and will generalize moderately well.
                By maximizing Sharpe ratio, you will avoid lengthy draw-downs.
                The algorithm will also not be overfit to low-frequency events by ignoring strategies that trade very rarely.
                Furthermore, the Particle Swarm method should cumulatively improve results as opposed to relying on eventual random discovery.
            </p>
            <pre>
                ...
                "useSharedAppDomain": true,
                "startDate": "2016-06-01",
                "endDate": "2018-06-01",
                "enableFitnessFilter": true,
                "minimumTrades": 10,
                "fitnessTypeName": "Jtc.Optimization.LeanOptimizer.NFoldCrossSharpeMaximizer",
                "fitness": {
                    "OptimizerTypeName": "ParticleSwarm",
                    "folds": 2        
                }        
            </pre>
        </div>
    </div>
</div>